from opentelemetry.sdk.resources import SERVICE_NAME, Resource
from dotenv import load_dotenv
import os

load_dotenv()
otlp_collector_endpoint = os.getenv("OTLP_COLLECTOR_ENDPOINT")

if not otlp_collector_endpoint:
    raise Exception("OTLP collector endpoint missing.")

def init_tracing(name: str):
    import logging
    from opentelemetry import trace
    from opentelemetry.sdk.trace import TracerProvider
    from opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter
    from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter

    resource = Resource(attributes={SERVICE_NAME: name})
    provider = TracerProvider(resource=resource)
    
    console_processor = BatchSpanProcessor(ConsoleSpanExporter())
    provider.add_span_processor(console_processor)
 
    span_processor = BatchSpanProcessor(OTLPSpanExporter(endpoint=otlp_collector_endpoint))
    provider.add_span_processor(span_processor)
    
    trace.set_tracer_provider(provider)
    tracer = trace.get_tracer(name)
    return [tracer, trace]

def init_metrics(name: str):
    from opentelemetry import metrics
    from opentelemetry.sdk.metrics import MeterProvider
    from opentelemetry.sdk.metrics.export import ConsoleMetricExporter, PeriodicExportingMetricReader
    from opentelemetry.exporter.otlp.proto.grpc.metric_exporter import OTLPMetricExporter
    
    resource = Resource(attributes={
        SERVICE_NAME: name
    })

    console_exporter = ConsoleMetricExporter()
    otlp_exporter = OTLPMetricExporter(endpoint=otlp_collector_endpoint)

    # readers
    console_reader = PeriodicExportingMetricReader(console_exporter)
    otlp_reader = PeriodicExportingMetricReader(otlp_exporter)

    # Initialize the MeterProvider with both readers
    meter_provider = MeterProvider(metric_readers=[console_reader, otlp_reader], resource=resource)

    # Set the MeterProvider globally
    metrics.set_meter_provider(meter_provider)

    meter = meter_provider.get_meter(name)
    return meter
  
def get_logger(name: str):
    import logging
    from opentelemetry.exporter.otlp.proto.grpc._log_exporter import OTLPLogExporter
    from opentelemetry._logs import set_logger_provider
    from opentelemetry.sdk._logs import LoggerProvider, LoggingHandler
    from opentelemetry.sdk._logs.export import BatchLogRecordProcessor

    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)

    # Console handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    # OTLP handler
    logger_provider = LoggerProvider(resource=Resource.create({SERVICE_NAME: name}))
    set_logger_provider(logger_provider)
    log_exporter = OTLPLogExporter(endpoint=otlp_collector_endpoint, insecure=True)
    logger_provider.add_log_record_processor(BatchLogRecordProcessor(log_exporter))
    otlp_handler = LoggingHandler(level=logging.INFO, logger_provider=logger_provider)
    logger.addHandler(otlp_handler)

    return logger
  
def get_request_instrumentor():
    from opentelemetry.instrumentation.requests import RequestsInstrumentor
    return RequestsInstrumentor